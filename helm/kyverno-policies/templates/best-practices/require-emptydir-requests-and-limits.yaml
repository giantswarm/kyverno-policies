{{- $name := "require-emptydir-requests-and-limits" }}
{{- if and (hasKey .Values.bestPracticesPolicies.policies $name) (get .Values.bestPracticesPolicies.policies $name).enabled }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ printf "%s-%s" .Values.policyNamePrefix $name }}
  labels: {{ include "labels.common" . | nindent 4 }}
  annotations:
    policies.kyverno.io/title: Require Requests and Limits for emptyDir
    policies.kyverno.io/category: Workload Best Practices, Cost Optimization
    policies.kyverno.io/severity: medium
    policies.kyverno.io/minversion: 1.9.0
    kyverno.io/kyverno-version: 1.11.1
    kyverno.io/kubernetes-version: "1.27"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Pods which mount emptyDir volumes may be allowed to potentially overrun
      the medium backing the emptyDir volume. This sample ensures that any
      initContainers or containers mounting an emptyDir volume have
      ephemeral-storage requests and limits set. Policy will be skipped if
      the volume has already a sizeLimit set.      
spec:
  background: false
  validationFailureAction: {{ (get .Values.bestPracticesPolicies.policies $name).mode }}
  rules:
    - name: check-emptydir-requests-limits
      match:
        any:
          - resources:
              kinds:
                - Pod
      context:
      - name: emptydirnames
        variable:
          jmesPath: request.object.spec.volumes[?contains(keys(@), 'emptyDir') && !contains(keys(emptyDir), 'sizeLimit')].name
      preconditions:
        all:
          - key: "{{ `{{` }}request.object.spec.volumes[?contains(keys(@), 'emptyDir')] || `[]` | length(@) {{ `}}` }}"
            operator: GreaterThanOrEquals
            value: 1
          - key: "{{ `{{` }} request.operation || 'BACKGROUND'{{ `}}` }}
            operator: AnyIn
            value:
              - CREATE
              - UPDATE
      validate:
        message: Containers mounting emptyDir volumes must specify requests and limits for ephemeral-storage.
        foreach:
          - list: "request.object.spec.[initContainers, containers][]"
            preconditions:
              any:
              - key: "{{ `{{` }} element.volumeMounts[].name {{ `}}` }}"
                operator: AnyIn
                value: "{{ `{{` }} emptydirnames {{ `}}` }}"
            pattern:
              resources:
                requests:
                  ephemeral-storage: "?*"
                limits:
                  ephemeral-storage: "?*"
{{- end }}
